
public class MatrixChainMultiplication {
	
	private int[] matrix;
	
	private int[] matrix2;

	private int[][] mTable;

	private int[][] splitParen;

	public MatrixChainMultiplication(int[] arr) {
		setMatrix(arr);
		setMatrix2(arr);
	}
	
	public void setMatrix2(int[] arr) {
		matrix2 = new int[arr.length+1];
		for (int i = 1; i <= arr.length; i++)
			matrix2[i] = arr[i-1];
		
		for (int i = 0; i < matrix2.length; i++) {
            for (int j = i+1; j < matrix2.length; j++) {
                if ((matrix2[i] > matrix2[j]) && (i != j) ) {
                    int temp = matrix2[j];
                    matrix2[j] = matrix2[i];
                    matrix2[i] = temp;
                }
            }
        }
	}
	
	public int[] getMatrix() {
		return matrix;
	}

	public void setMatrix(int[] matrix) {
		this.matrix = matrix;
	}

	public int[][] getSplitParen() {
		return splitParen;
	}

	public int matrixOrder(int matrix[], int end) {

		mTable = new int[end][end];
		splitParen = new int[end][end];

		for (int i = 1; i < end; i++)
			mTable[i][i] = 0;

		for (int l = 2; l < end; l++) {
			for (int i = 1; i < end - l+1; i++) {
				int j = i + l-1;
				if (j == end)
					continue;
				mTable[i][j] = Integer.MAX_VALUE;
				for (int k = i; k <= j - 1; k++) {
					int count = mTable[i][k] + mTable[k + 1][j] + matrix[i - 1] * matrix[k] * matrix[j];
					if (count < mTable[i][j]) {
						mTable[i][j] = count; // saves minimum operation
						splitParen[i][j] = k; // saves k position where the parenthesis was inserted
					}
				}
			}
		}
		return mTable[1][end - 1]; // returns the lowest value in the mTable 
	}
		
	public String printOptimalParen(int[][] split, int i, int j) {
		if (i == j)
			return matrix2[i] + "*"; // prints the matrix at index i
		else {
			int k = split[i][j];
			return "(" + printOptimalParen(split, i, k) + printOptimalParen(split, k + 1, j) + ")";
		}
	}
	
	public String printMatrixTable() {
		String table = "";
		for (int r = 1; r < mTable.length; r++) {
			table += "\n";
			for (int c = 1; c < mTable[r].length; c++) {
				if (c == mTable[r].length-1)
					table += mTable[r][c];
				else 
					table += mTable[r][c] + ", ";
			}
		}
		return table;
	}
}
