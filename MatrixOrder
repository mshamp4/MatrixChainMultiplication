package multiplication;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

public class MatrixOrder {

	private static int[] matrixOrder;

	public static void main(String[] args) {

		InputStreamReader isReader = new InputStreamReader(System.in);
		BufferedReader bufReader = new BufferedReader(isReader);

		try {
			String input = bufReader.readLine();
			int[] arr = new int[Integer.parseInt(input)];
			int count = 0;
			input = bufReader.readLine(); // skips the first line and doesn't
											// add it to the array

			while (input != null) {
				arr[count++] = Integer.parseInt(input);
				input = bufReader.readLine();
			}

			MatrixOrder order = new MatrixOrder(arr.length - 1);
			int min = order.matrixChainMultiplication(arr, 1, (arr.length - 1));
			System.out.println("Minimum number of multiplications is: " + min);
			order.optimalOrder(matrixOrder, arr);
			// System.out.println("Optimal order: " +
			// order.optimalOrder(matrixOrder));

		} catch (IOException e) {
			System.out.println("An error has occured!");
			System.exit(0);

		} catch (NumberFormatException e) {
			System.out.println("File must contain only integers!");
		}
	}

	public MatrixOrder(int arrLength) {
		matrixOrder = new int[arrLength];
		for (int i = 1; i < arrLength; i++)
			matrixOrder[i] = Integer.MAX_VALUE;
	}

	public int matrixChainMultiplication(int matrix[], int start, int end) {

		// matrixOrder = new int[matrix.length-1];

		if (start == end)
			return 0;

		int min = Integer.MAX_VALUE;

		for (int i = start; i < end; i++) {
			int count = matrixChainMultiplication(matrix, start, i) + matrixChainMultiplication(matrix, i + 1, end)
					+ matrix[start - 1] * matrix[i] * matrix[end];

			if (count < min) {
				min = count;

				if (min < matrixOrder[i]) {
					matrixOrder[i] = min;
					// System.out.println("min: " + min);
					// System.out.println("i: " + i);
				}
			}
		}

		return min;
	}

//	private String printOptimalParens(int i, int j) {
//
//		if (i == j)
//
//			return "A[" + i + "]";
//
//		else
//
//			return "(" + printOptimalParens(i, s[i][j])
//
//					+ printOptimalParens(s[i][j] + 1, j) + ")";
//
//	}

	public String optimalOrder(int order[], int matrix[]) {

		System.out.println(order[0]);
		System.out.println(order[1]);
		System.out.println(order[2]);
		System.out.println(order[3]);
		return "()";
	}
}
